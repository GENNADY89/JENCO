#!/usr/bin/env python3
"""JENCO‚ÄëGPT‚ÄëBOT main entry‚Äëpoint.

‚Ä¢ –°–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è Slack (`/slack/events`)  
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç slash‚Äë–∫–æ–º–∞–Ω–¥—É `/gpt`  
‚Ä¢ –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª / —Ç—Ä–µ–¥.

–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    SLACK_SIGNING_SECRET ‚Äì –∏–∑ Your¬†App ‚Üí Basic¬†Information ‚Üí Signing¬†Secret
    SLACK_BOT_TOKEN      ‚Äì Bot¬†OAuth¬†Token (xoxb‚Äë‚Ä¶)
    OPENAI_API_KEY       ‚Äì –∫–ª—é—á OpenAI

Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞—ë—Ç PORT, –ø–æ—ç—Ç–æ–º—É app.run() –±–µ—Ä—ë—Ç –µ–≥–æ –∏–∑ env.
"""
from __future__ import annotations

import logging
import os
from typing import Any, Dict

from flask import Flask, jsonify, make_response, request
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from slack_sdk.signature import SignatureVerifier

# ---------------------------------------------------------------------------
#  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ---------------------------------------------------------------------------
REQUIRED_VARS = ("SLACK_SIGNING_SECRET", "SLACK_BOT_TOKEN", "OPENAI_API_KEY")
missing = [name for name in REQUIRED_VARS if not os.getenv(name)]
if missing:
    raise RuntimeError(f"Missing env vars: {', '.join(missing)}")

SLACK_SIGNING_SECRET = os.environ["SLACK_SIGNING_SECRET"]
SLACK_BOT_TOKEN = os.environ["SLACK_BOT_TOKEN"]
OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]

# ---------------------------------------------------------------------------
#  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ---------------------------------------------------------------------------
logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO"))
log = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
#  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫
# ---------------------------------------------------------------------------
app = Flask(__name__)
client = WebClient(token=SLACK_BOT_TOKEN)
sign_verifier = SignatureVerifier(SLACK_SIGNING_SECRET)

# ---------------------------------------------------------------------------
#  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ---------------------------------------------------------------------------

def chatgpt(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç."""
    import openai  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –ø—Ä–∏ unit‚Äë—Ç–µ—Å—Ç–∞—Ö

    openai.api_key = OPENAI_API_KEY
    try:
        resp = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=512,
        )
        return resp.choices[0].message.content.strip()
    except Exception as exc:  # pylint: disable=broad-except
        log.exception("OpenAI API error: %s", exc)
        return "‚ö†Ô∏è Sorry, I couldn't get a response from OpenAI."


def _post_message(channel: str, text: str, thread_ts: str | None = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Slack —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        client.chat_postMessage(channel=channel, text=text, thread_ts=thread_ts)
    except SlackApiError as err:
        log.error("Slack API error: %s", err.response["error"])


# ---------------------------------------------------------------------------
#  HTTP‚Äë–º–∞—Ä—à—Ä—É—Ç—ã
# ---------------------------------------------------------------------------
@app.route("/", methods=["GET"])  # health‚Äëcheck
def index():  # noqa: D401  (–ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è‚Äë—Ö—ç–Ω–¥–ª–µ—Ä)
    return "JENCO‚ÄëGPT‚ÄëBOT is alive ‚úî", 200


@app.route("/slack/events", methods=["POST"])
def slack_events():
    """–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏—ë–º–Ω–∏–∫ —Å–æ–±—ã—Ç–∏–π Slack Events API."""
    # 1) –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –æ—Ç Slack
    if request.headers.get("X-Slack-Retry-Num"):
        return make_response("No need to retry", 200)

    # 2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if not sign_verifier.is_valid_request(request.get_data(), request.headers):
        log.warning("Invalid Slack signature ‚Üí 403")
        return make_response("Invalid request", 403)

    payload: Dict[str, Any] = request.get_json(force=True, silent=True) or {}

    # 3) URL‚Äëverification (–ø–µ—Ä–≤–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)
    if payload.get("type") == "url_verification":
        return jsonify({"challenge": payload.get("challenge")})

    # 4) event_callback
    if payload.get("type") == "event_callback":
        handle_event(payload.get("event", {}))

    return "", 200


def handle_event(event: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤."""
    etype = event.get("type")
    if etype == "app_mention":
        _on_app_mention(event)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (message.channels –∏ —Ç.–¥.)


def _on_app_mention(event: Dict[str, Any]):
    """–û—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ @JENCO‚ÄëGPT‚ÄëASSISTANT ‚Ä¶"""
    channel = event.get("channel")
    thread_ts = event.get("ts")

    raw_text: str = event.get("text", "")
    prompt = raw_text.split("<@", 1)[-1].split(">", 1)[-1].strip() or "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

    answer = chatgpt(prompt)
    _post_message(channel, answer, thread_ts=thread_ts)


@app.route("/gpt", methods=["POST"])  # Slash‚Äëcommand endpoint
def slash_gpt():  # noqa: D401
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if not sign_verifier.is_valid_request(request.get_data(), request.headers):
        return make_response("Invalid request", 403)

    form = request.form
    channel_id = form.get("channel_id")
    prompt = form.get("text", "").strip() or "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

    # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É Slack'—É ack, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å timeout (3¬†—Å–µ–∫)
    ack_body = {
        "response_type": "ephemeral",
        "text": "üí≠ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª‚Ä¶"
    }

    # Async‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–±–µ–∑ Celery, –ø—Ä–æ—Å—Ç–æ fire‚Äëand‚Äëforget)
    from threading import Thread

    Thread(target=lambda: _post_message(channel_id, chatgpt(prompt))).start()

    return jsonify(ack_body)


# ---------------------------------------------------------------------------
#  –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
# ---------------------------------------------------------------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
